#!/usr/bin/python

import numpy as np
from scipy.optimize import minimize, fmin_powell, approx_fprime
from scipy.spatial.distance import pdist
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Neon parameters
cluster_type = "Ne"
m = 3.67853398414 * 10**4
# rm = 5.811939648195448
rm = 3.0856 * 1.88973
epsilon = 0.112738488 * 10**(-3)
sigma = rm / (2**(1./6))

# Argon parameters
#cluster_type = "Ar"
#m = 8.28207441953 * 10**4
#rm = 7.233107372374397
#epsilon = 0.37811729 * 10**(-3)

print(rm)

def potential(x):
    """
    Calculate the potential for n identical particles that interact in a pairwise manner
    """

    x = x.reshape((x.size//3, 3))
    npart = x.shape[0]
    dist = pdist(x)
    pot = 0
    for d in dist:
        pot += epsilon * ((rm/d)**12 - 2*(rm/d)**6)

    rc = 3.5 * sigma
    Rcm = np.sum(x,axis=0)
    for p in range(npart):
        pot += epsilon * (np.linalg.norm(x[p,:] - Rcm)/rc)**20

    return pot

def hessian(x0, func, epsilon=1.e-6, linear_approx=False):
    """
    A numerical approximation to the Hessian matrix of the input function
    """

    f1 = (approx_fprime(x0, func, epsilon) + approx_fprime(x0, func, -epsilon))/2.
    if linear_approx:
        f1 = np.matrix(f1)
        return f1.transpose()*f1

    n = x0.shape[0]
    hessian = np.zeros((n,n))
    xx = x0
    for j in range(n):
        xx0 = xx[j]
        xx[j] = xx0 + epsilon
        f2 = (approx_fprime(x0, func, epsilon) + approx_fprime(x0, func, -epsilon))/2.
        hessian[:,j] = (f2-f1)/epsilon
        xx[j]=xx0

    hessian += hessian.T
    hessian /= 2

    return hessian

def gradient(x0, epsilon=1.e-6):
    return (approx_fprime(x0, potential, epsilon) + approx_fprime(x0, potential, -epsilon))/2.

def hess_potential(x0):
    return hessian(x0, potential)

def remove_COM(xopt):
    xopt = xopt.reshape(npart,3)
    xopt[:,0] = xopt[:,0] - np.mean(xopt[:,0])
    xopt[:,1] = xopt[:,1] - np.mean(xopt[:,1])
    xopt[:,2] = xopt[:,2] - np.mean(xopt[:,2])
    xopt = xopt.reshape(npart*3)

def calculate_moment_inertia(xopt):
    xopt = xopt.reshape(npart,3)
    I = np.zeros((3,3))
    for p in range(npart):
        I[0,0] += m*(xopt[p,1]**2+xopt[p,2]**2)
        I[1,1] += m*(xopt[p,0]**2+xopt[p,2]**2)
        I[2,2] += m*(xopt[p,0]**2+xopt[p,1]**2)
        I[0,1] -= m*xopt[p,0]*xopt[p,1]
        I[0,2] -= m*xopt[p,0]*xopt[p,2]
        I[1,2] -= m*xopt[p,1]*xopt[p,2]
    I[2,1] = I[1,2]
    I[1,0] = I[0,1]
    I[2,0] = I[0,2]
    xopt = xopt.reshape(npart*3)
    return I

def calculate_P_matrix(xopt, eigvec_I):
    xopt = xopt.reshape(npart,3)
    P = np.dot(xopt, eigvec_I)
    xopt = xopt.reshape(npart*3)
    return P

def create_rot_trans_matrix(xopt, eigvec_I):
    D1 = np.sqrt(m)*np.tile(np.array([1.,0.,0.]),npart)
    D2 = np.sqrt(m)*np.tile(np.array([0.,1.,0.]),npart)
    D3 = np.sqrt(m)*np.tile(np.array([0.,0.,1.]),npart)
    D4 = np.zeros(npart*3)
    D5 = np.zeros(npart*3)
    D6 = np.zeros(npart*3)
    P = calculate_P_matrix(xopt, eigvec_I)
    for p in range(npart):
        D4[3*p]   = (P[p,1]*eigvec_I[0,2] - P[p,2]*eigvec_I[0,1])/np.sqrt(m)
        D4[3*p+1] = (P[p,1]*eigvec_I[1,2] - P[p,2]*eigvec_I[1,1])/np.sqrt(m)
        D4[3*p+2] = (P[p,1]*eigvec_I[2,2] - P[p,2]*eigvec_I[2,1])/np.sqrt(m)
        D5[3*p]   = (P[p,2]*eigvec_I[0,0] - P[p,0]*eigvec_I[0,2])/np.sqrt(m)
        D5[3*p+1] = (P[p,2]*eigvec_I[1,0] - P[p,0]*eigvec_I[1,2])/np.sqrt(m)
        D5[3*p+2] = (P[p,2]*eigvec_I[2,0] - P[p,0]*eigvec_I[2,2])/np.sqrt(m)
        D6[3*p]   = (P[p,0]*eigvec_I[0,1] - P[p,1]*eigvec_I[0,0])/np.sqrt(m)
        D6[3*p+1] = (P[p,0]*eigvec_I[1,1] - P[p,1]*eigvec_I[1,0])/np.sqrt(m)
        D6[3*p+2] = (P[p,0]*eigvec_I[2,1] - P[p,1]*eigvec_I[2,0])/np.sqrt(m)

    D = np.column_stack((D1,D2,D3,D4,D5,D6))
    deleted_cols = []
    for i in range(6):
        norm = np.linalg.norm(D[:,i])
        if norm<1e-10:
            deleted_cols.append(i)
        else:
            D[:,i] /= np.linalg.norm(D[:,i])

    D = np.delete(D,deleted_cols,1)

    return D

def create_D_matrix(rot_trans):
    rot_trans_degrees = rot_trans.shape[1]
    for i in range(3*npart-rot_trans_degrees):
        vec = np.random.rand(3*npart)
        for j in range(rot_trans.shape[1]):
            #print(j, np.dot(rot_trans[:,j], rot_trans[:,j]))
            vec -= np.dot(vec,rot_trans[:,j])/np.dot(rot_trans[:,j],rot_trans[:,j]) * rot_trans[:,j]
        vec /= np.linalg.norm(vec)
        if np.linalg.norm(vec)==0:
            i-=1
            continue
        rot_trans = np.column_stack((rot_trans,vec))

    return np.delete(rot_trans,range(rot_trans_degrees),1)

def plot_potential():
    x_potential = np.linspace(rm-0.78, 50, 1000)
    y_potential = epsilon * ((rm/x_potential)**12 - 2.*(rm/x_potential)**6) + epsilon
    x_harm = np.linspace(rm-1.175, rm+1.175, 1000)
    y_harm = 0.5 * 72 * epsilon / rm**2 * (x_harm - rm)**2
    print(np.sqrt(72 * epsilon / (rm**2*m)))
    plt.plot(x_potential,y_potential)
    plt.plot(x_harm,y_harm)
    plt.show()

def solve_cluster():
    global hess, frequency, vectors, values, npart, eqm_pot, xopt, transform_matrix, mu, cart_hess
    npart = int(input("Enter the number of particles: "))
    np.random.seed(60)
    x = np.random.rand(npart*3)
    #powell_res = minimize(potential, x, method='powell', options={'xtol':1e-20, 'disp':True})
    #xopt = powell_res.x
    newton_cg_res = minimize(potential, x, method='Newton-CG', jac=gradient, hess=hess_potential, options={'xtol':1e-20, 'disp':True})
    xopt = newton_cg_res.x
    remove_COM(xopt)
    fig = plt.figure()
    xopt = xopt.reshape(npart,3)
    np.savetxt(f'{cluster_type}{npart}_angstrom.xyz', xopt * 0.529177)
    np.savetxt(f'{cluster_type}{npart}_bohr.xyz', xopt)
    print(xopt)
    ax = fig.add_subplot(111,projection='3d')
    ax.scatter(xopt[:,0],xopt[:,1],xopt[:,2])
    plt.show()
    eqm_pot = potential(xopt)

def main():
    plot_potential()
    solve_cluster()
    print('Equilibrium Potential Energy in multiples of well depth = ',potential(xopt)/epsilon)

if __name__=='__main__':
    main()
